# x -> y 공간이동 장치 작동 횟수의 최솟값 구하기
# 이동거리 급격하게 늘릴 경우 기계에 심각한 결함
# 이전 작동시기에 k광년 이동하였을때는 k-1,, k 혹은 k+1 광년만을 다시 이동가능
# 처음 작동시킬 경우 -1, 0, 1 광년을 이론상 이동 가능, = 1광년 이동 
# -> 2광년이동
# x지점에서 y지점을 향해 최소한의 작동횟수이동
# y지점에 도착 바로 직전 이동거리 == 1광년

# y-1까지로 계산
# 첫번째는 +1 무조건
# 거리 k = y-x

# 규칙찾기
# 이동 숫자 표
# 거리 1,2,  3,4,5,6,  7,8,9,10,11,12,  13,14,15,16....
# 횟수 1,2,  3,3,4,4,  5,5,5,6, 6, 6,   7, 7, 7, 7.....
# 규칙 : 2n만큼씩 횟수가같은 거리개수가 증가한다.
# 누적하면서 어디 2n에 속하는지 확인
# 2n을 구하면 개수 반을 갈라서 전반부면 2n-1, 후반부면 2n을 출력
import sys

t = int(input())
for _ in range(t):
    x,y = map(int, sys.stdin.readline()[:-1].split())
    k = y-x
    n = 1

    while True:
        if k <= n*(n+1):    # 해당 군의 가장 큰 거리 구하기
            break
        n +=1

    if n**2 >= k:
        print(2*n-1)
    else:
        print(2*n)


# 참고한 코드
T = int(input())
for i in range(T):
    x, y = map(int, input().split()) #출발 및 도착 지점
    d = y - x #거리
    n = 0
    while True:
        if d <= n*(n+1):
            break
        n += 1 #총 이동 거리가 n의 제곱보다 작거나 같을 때
    if d <= n**2:
        print(n*2-1) #총 이동 거리가 n의 제곱보다 클 때
    else:
        print(n*2)

# 한줄평
# 문제를 통해 얻은 팁
# 1. 숫자 연속적인 것 조합 등은 규칙을 먼저 찾아야한다.
# 2. 2의 곱만큼 숫자가 커질때 해당 부분의 가장 큰 수는 n*(n+1) 로 찾을수있다.
#         -> 2의 2곱인 파트 = 3456 =이유 2*2 =4개여서 -> 이 파트에서 가장큰수 = 2*(2+1) =6
# 3. 2의 곱만큼 커진 파트에서 딱 반 나누기 : 2**n = 중간앞