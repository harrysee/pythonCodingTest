# 골드바흐의 추측
# = 2보다 큰 모든 짝수는 두 소수의 합으로 나타낼수 있다.
# 예를 들면, 4 = 2 + 2, 6 = 3 + 3, 8 = 3 + 5, 10 = 5 + 5, 12 = 5 + 7, 14 = 3 + 11, 14 = 7 + 7이다. 
# 10000보다 작거나 같은 모든 짝수 n에 대한 골드바흐 파티션은 존재
# 2보다 큰 짝수 n이 주어졌을때 n의 골드바흐 파티션 출력 n의 골드바흐파티션 여러가지,
# 두소수 차이가 가장 작은것

# 풀이 수도코드
# n까지의 소수리스트 생성
# 앞에서부터 n의 절반까지 소수를 순회
    # 앞에서부터 소수뺀 수가 소수리스트에 있으면 저장
    # 이미 저장된 x-y보다 더 작으면 그걸로 업데이트

import sys

# sosu = [0 for i in range(10001)]
# sosu[1] = 1
# for i in range(2, 98):
#     for j in range(i * 2, 10001, i):
#         sosu[j] = 1
sosu = {i:False for i in range(10000+1)}
sosu[2] = True
for i in range(3,10000,2):
    isS = 1
    for j in range(2,int(i**0.5)+1):
        if i%j==0 :
            isS -= 1
            break
    if isS: sosu[i] = True

t = int(input())
for _ in range(t):
    n = int(sys.stdin.readline())
    for i in range(n//2,1,-1):
        if sosu[n-i] and sosu[i]:
            print(i,n-i)
            break


# 소수리스트에 소수인 것들은 True로 바꾼뒤 처음엔 소수 리스트 폴문을 돌려서 뺀것도 소수면서 이전에 구한것보다 차이가 들나는것을 찾으려했다
# 그랬더니 큰 수 10000까지 등은 시간이 오래걸렸다.
# 다른 블로그에서 힌트를 얻어 절반부터 1까지 폴문을 돌리면서 구하면 차이가 적게나는것부터 구하게된다
# 또한 if문에 걸리면 바로 break를 하여 시간복잡도도 적어져서 훨씬 효율적이였다.
# 핵심) -> 차이가 적은 수 = 절반부터 빼면서 구하기!!