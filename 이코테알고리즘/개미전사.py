# 개미전사 - 다이나믹프로그래밍
# 메뚜기 마을의 식량창고 몰래 공격할건데 식량창고 일직선으로 이어져있고 정해진 수의 식량 저장되있음
# 식량창고 선택적으로 약탈 식량 빼앗을거
# 메뚜기 정찰병들은 일직선상에 존재하는 식량창고 중에서 서로 인접한 식량창고가 공격받으면 바로 알아챌 수 있다
# 개미 전사가 정찰병에게 들키지 않고 식량창고를 약탈하기 위해서는 최소한 한 칸 이상 떨어진 식량창고를 약탈
# 1,3,1,5 의 식량창고 4개가 주어지면 최댓값인 3,5를 가져간다.
# 입력 : 1. N(식량창고수), K(저장된 식량의 개수)

# 풀이 
# 1 3 5 이렇게 될수도 있고,두칸씩 뛸수도 있다. 풀이를 참고하자
# 점화식 > i번째 창고의 최적해 = i-2와 i-1 중 큰 값을 고른다
# -> 바로전값을 선택하면 현재사용X, -2인 전전값은 현재사용 ㄱㄴ, 둘 중 어느 것을 선택하여야하는지 
# -3 이하는 1칸 이상 떨어져서 항상 털 수 있으므로 고려안함
# ------------------------------------------------------
# 보텀업 방식 풀이
import sys

N = int(input())
dp = [0]*N  # DP테이블 : 각 창고에 도달하였을때 각각의 최대식량값 구해나감
containers = list(map(int,sys.stdin.readline().split()))

dp[0] = containers[0]   # 처음 세팅
dp[1] = max(containers[0],containers[1])    # 처음과 바로있어 넣을 수 없으므로 0,1번 창고 중 더 큰값으로 넣기
for i in range(2,N):    # 2번 창고부터
    dp[i] = max(dp[i-1], (dp[i-2]+containers[i]))   # 바로전 vs 바로전전+현재값

print(dp[N-1])  # 마지막 창고까지 왔을 때 최적해 출력