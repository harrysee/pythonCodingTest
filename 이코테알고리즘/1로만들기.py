# 정수 X가 주어질 때, 정수 X에 사용할 수 있는 연산은 다음과 같이 4가지임
    # X가 5로 나누어떨어지면, 5로 나눈다.
    # X가 3으로 나누어떨어지면, 3으로 나눈다.
    # X가 2로 나누어떨어지면, 2로 나눈다.
    # X에서 1을 뺀다.
# 정수 X에서 연산 4개를 적절히 사용해 1을 만들려고 함, 연산 사용 횟수의 최솟값 출력

# 다이나믹 프로그래밍 : 메모제이션 보텀업 방식으로 풀거임
# 2부터 시작하며 X까지 각 숫자의 연산횟수를 저장해나간다. : 중요 i와 데이터는 같다.
# 각 연산이 가능한 경우는 각각 나누어떨어질때만 해줘야한다. - -1한 연산횟수와 비교하며 더 작은걸 저장
# 연산 중복이 염려되지만 겹쳐도 작은 수부터 구하면 상관없음

d = [0]*30000 # 정수 X의 최대범위
X = int(input())

for i in range(2,X+1):
    d[i] = d[i-1]+1 # -1연산 +현재연산도 횟수 1로 침
    
    if i%2==0:
        d[i] = min(d[i],d[i//2]+1) # 연산 횟수 비교해서 최소횟수 넣기
    elif i%3==0:
        d[i] = min(d[i],d[i//3]+1)
    elif i % 5 ==0:
        d[i] = min(d[i], d[i // 5] + 1) 

print(d[X]) # X의 연산횟수 구하기

# 이문제를 그리디로 푼다면 5로 나눈 후 3으로 나눠야하는지에 대한 순서의 어려움이 있다고 깨달음
# 이런 문제가 나오면 다이나믹을 떠올리고 적용할 수 있도록 노력해야겠다.